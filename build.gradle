buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:5.3.2'
        // Fixes a version collision with the license plugin.
        classpath 'org.springframework:spring-core:5.2.7.RELEASE'
    }
}

plugins {
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'com.diffplug.gradle.spotless' version '3.24.2'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'org.jetbrains.dokka' version '0.9.17'
    id 'com.github.spotbugs' version '4.4.1'
}
repositories {
    mavenCentral()
    jcenter()
}

group 'com.thoughtworks.etwg'
version '1.0.' + project.hasProperty('version') ? project.property('version') : 'whoami'.execute().text.trim();
def java_kotlin_projects = ['lambda-service', 'lambda-service-model']



task installGitHooks(type: Copy) {
    from { file("$rootProject.rootDir/etc/pre-commit.sh") }
    into { file("$rootProject.rootDir/.git/hooks") }
    doLast {
        file("$rootProject.rootDir/.git/hooks/pre-commit.sh").renameTo(
                file("$rootProject.rootDir/.git/hooks/pre-commit")
        )
    }
}

task setup(type:Task){
    dependsOn installGitHooks
}

subprojects {
    group project.rootProject.group
    version project.rootProject.version
        repositories {
            mavenCentral()
            jcenter()
        }
    if(java_kotlin_projects.contains(project.name)) {
        apply plugin: 'java'
        apply plugin: 'jacoco'
        apply plugin: 'org.owasp.dependencycheck'
        apply plugin: 'com.github.hierynomus.license'
        apply plugin: 'com.diffplug.gradle.spotless'
        apply plugin: 'maven-publish'
        apply plugin: 'org.jetbrains.dokka'
        apply plugin: 'com.github.spotbugs'

        configurations.all {
            exclude group: 'xpp3'
            exclude group: 'pull-parser'
        }

        //
        // Handle replacements to transitive dependencies for security vulnerabilities
        //
        configurations.all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'org.dom4j'
                        && details.requested.name == 'dom4j'
                        && details.requested.version == '2.1.1') {
                    details.useVersion '2.1.3'
                    details.because 'https://nvd.nist.gov/vuln/detail/CVE-2020-10683'
                }
            }
        }

        compileJava {
            sourceCompatibility = JavaVersion.VERSION_11
            targetCompatibility = JavaVersion.VERSION_11
        }

        //
        // Common test dependencies
        //
        dependencies {
            testImplementation group: 'junit', name: 'junit', version: '4.12'
            testImplementation 'com.google.truth:truth:1.0'
            spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.1'
            compileOnly 'com.github.spotbugs:spotbugs-annotations:4.0.4'
        }

        if (!project.name.contains('test')) {
            apply plugin: 'com.jfrog.bintray'
        }
        task sourceJar(type: Jar) {
            from sourceSets.main.allSource
        }

        task packageJavadoc(type: Jar, dependsOn: ['javadoc', 'dokka']) {
            from javadoc.destinationDir
            from file("${project.buildDir.absolutePath}/dokka")
            //noinspection GrDeprecatedAPIUsage
            classifier = 'javadoc'
        }

        spotbugs {
            ignoreFailures = false
            showStackTraces = true
            showProgress = true
            excludeFilter = rootProject.file("etc/spotbugs-filter.xml")
        }

        spotbugsMain {
            reports {
                html {
                    enabled = true
                    destination = file("$project.buildDir/reports/spotbugs.html")
                }
            }
        }

        spotbugsTest {
            enabled = false
        }

        spotless {
            java {
                googleJavaFormat()
                paddedCell()
            }
            kotlin {
                ktlint().userData(['indent_size': '4', 'continuation_indent_size': '4'])
                paddedCell()
            }
        }


        publishing {
            publications {
                java(MavenPublication) {
                    from components.java
                    groupId project.group
                    artifactId project.name
                    version rootProject.version
                    artifact sourceJar {
                        classifier "sources"
                    }
                    artifact packageJavadoc
                }
            }
        }


        dependencyCheck {
            suppressionFile = rootProject.file("etc/suppression.xml")
            format = 'ALL'
            analyzers {
                retirejs {
                    enabled = false
                }
                assemblyEnabled = false
            }
        }


        license {
            header rootProject.file('etc/HEADER')
            strictCheck true
            mapping("java", "SLASHSTAR_STYLE")
            exclude "**/*.json"
            exclude "**/*.mustache"
            exclude "com/my/**"
        }

        jacocoTestCoverageVerification {
            violationRules {
                rule {
                    limit {
                        minimum = 0.85
                    }
                }
            }
        }


        jacocoTestReport {
//            additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
//            sourceDirectories = files(sourceSets.main.allSource.srcDirs)
//            classDirectories = files(sourceSets.main.output)
            reports {
                html.enabled = true
                xml.enabled = true
                csv.enabled = false
            }
        }

        build.dependsOn sourceJar
        build.dependsOn packageJavadoc
        check.dependsOn dependencyCheckAnalyze
        check.dependsOn jacocoTestCoverageVerification
        check.dependsOn licenseFormat
        check.finalizedBy jacocoTestReport
        check.dependsOn spotbugsMain
    }

}