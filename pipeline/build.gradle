apply plugin: 'groovy'
def jobDslVersion = '1.66'
sourceSets {
    jobs {
        groovy {
            srcDirs 'src/jobs'
            compileClasspath += main.compileClasspath
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://repo.jenkins-ci.org/releases/' }
}

// Exclude buggy Xalan dependency this way the JRE default TransformerFactory is used
// The xalan pulled in by htmlunit does not properly deal with spaces folder / job names
configurations.all*.exclude group: 'xalan'

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.4'
    implementation "org.jenkins-ci.plugins:job-dsl-core:${jobDslVersion}"
    implementation "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}"
    implementation "org.jenkins-ci.plugins:job-dsl:${jobDslVersion}@jar"
    implementation('org.codehaus.groovy.modules.http-builder:http-builder:0.7.2') {
        exclude(module: 'groovy')
    }
    implementation('org.apache.ant:ant:1.9.7')
    testImplementation 'org.spockframework:spock-core:2.0-M2-groovy-3.0'
}

task publishJenkinsJobs(dependsOn: 'classes', type: JavaExec) {
    def props = [
            pattern : "src/jobs/*.groovy",
            baseUrl : "${project.property('jenkins.url')}/job", // if you have a folder, put it here
            username: project.hasProperty('jenkinsUsername') ? project.property('jenkinsUsername') : '',
            password: project.hasProperty('jenkinsPassword') ? project.property('jenkinsPassword') : ''

    ]
    main = 'com.dslexample.rest.RestApiScriptRunner'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties props
}

task formatArchivaSecret(type: Copy) {
    from 'src/xml/'
    into "$buildDir/xml/archiva"
    filter { line ->
        line.replaceAll('CREDENTIAL_ID', 'archiva')
            .replaceAll('CREDENTIAL_DESCRIPTION', 'Archiva repository credentials')
            .replaceAll('CREDENTIAL_USERNAME', project.mavenRepositoryUsername)
            .replaceAll('CREDENTIAL_PASSWORD', project.mavenRepositoryPassword)
    }
}

task publishArchivaSecret(dependsOn: ['classes', 'formatArchivaSecret'], type: JavaExec) {
    def props = [
            secret: "archiva",
            file : "$buildDir/xml/archiva/credential-template.xml",
            baseUrl : "${project.property('jenkins.url')}/", // if you have a folder, put it here
            username: project.hasProperty('jenkinsUsername') ? project.property('jenkinsUsername') : '',
            password: project.hasProperty('jenkinsPassword') ? project.property('jenkinsPassword') : ''

    ]
    main = 'com.dslexample.rest.RestApiSecretsRunner'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties props
}

task formatJenkinsSecret(type: Copy) {
    from 'src/xml/'
    into "$buildDir/xml/jenkins"
    filter { line ->
        line.replaceAll('CREDENTIAL_ID', 'jenkins')
                .replaceAll('CREDENTIAL_DESCRIPTION', 'Jenkins self hosted admin credentials')
                .replaceAll('CREDENTIAL_USERNAME', project.jenkinsUsername)
                .replaceAll('CREDENTIAL_PASSWORD', project.jenkinsPassword)
    }
}

task publishJenkinsSecret(dependsOn: ['classes', 'formatJenkinsSecret'], type: JavaExec) {
    def props = [
            secret: "jenkins",
            file : "$buildDir/xml/jenkins/credential-template.xml",
            baseUrl : "${project.property('jenkins.url')}/", // if you have a folder, put it here
            username: project.hasProperty('jenkinsUsername') ? project.property('jenkinsUsername') : '',
            password: project.hasProperty('jenkinsPassword') ? project.property('jenkinsPassword') : ''

    ]
    main = 'com.dslexample.rest.RestApiSecretsRunner'
    classpath = sourceSets.main.runtimeClasspath
    systemProperties props
}

task deploySecrets(){
    dependsOn publishArchivaSecret
    dependsOn publishJenkinsSecret
}

